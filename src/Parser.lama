-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp(op) {
  [s (op), fun(l, _, r) { Binop (op, l ,r) }]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr ({
      [Left, map( binOp, {"!!", "&&"} ) ],
      [Nona, map( binOp, {"<", ">", "<=", ">=", "==", "!=" } ) ],
      [Left, map( binOp, {"+", "-"} ) ],
      [Left, map( binOp, {"/", "*", "%"} ) ]
  }, primary)
  );

var stmt = memo $ eta syntax (
    v = lident s[":="] e = exp { Assn (v, e) }
  | x = stmt s[";"] y = stmt end { Seq (x, y) }
  | kRead v = inbr[s("("), lident, s(")")] { Read (v) }
  | kSkip { Skip }
  | kWrite r = inbr[s("("), exp, s(")")] { Write (r) }
);

-- Public top-level parser
public parse = stmt;
             
