-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binOp(op) {
  [s (op), fun(l, _, r) { Binop (op, l ,r) }]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta (expr ({
      [Left, map( binOp, {"!!", "&&"} ) ],
      [Nona, map( binOp, {"<", ">", "<=", ">=", "==", "!=" } ) ],
      [Left, map( binOp, {"+", "-"} ) ],
      [Left, map( binOp, {"/", "*", "%"} ) ]
  }, primary)
  );

var stmt = memo $ eta syntax (
    x = stmt_part s [";"] y = stmt { Seq (x, y) }
  | last = stmt_part { last }
    ),
    stmt_if = memo $ eta syntax (
      kIf e = exp kThen s1 = stmt s2 = stmt_else { If (e, s1, s2) }
    ),
    stmt_else = memo $ eta syntax (
      kFi { Skip }
    | kElse s = stmt kFi { s }
    | kElif e = exp kThen s1 = stmt s2 = stmt_else { If (e, s1, s2) }
    ),
    stmt_while = memo $ eta syntax (
      kWhile e = exp kDo s = stmt kOd { While (e, s) }
    | kDo s = stmt kWhile e = exp kOd { DoWhile (s, e) }
    | kFor init = stmt s [","] e = exp s [","] each = stmt kDo s = stmt kOd { Seq (init, While (e, Seq (s, each))) }
    ),
    stmt_part = memo $ eta syntax (
      v = lident s [":="] e = exp { Assn (v, e) }
    | kRead v = inbr[s("("), lident, s(")")] { Read (v) }
    | kWrite r = inbr[s("("), exp, s(")")] { Write (r) }
    | kSkip { Skip }
    | s = stmt_if { s }
    | s = stmt_while { s }
  );

-- Public top-level parser
public parse = stmt;
             
